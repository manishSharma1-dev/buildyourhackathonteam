// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https:// pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id String @id @default(cuid())
  name String
  email String @unique
  github String?
  twitter String?
  role Role @default(Helper)
  credit UserCredit?

  teamcreated Team[]
  teamjoined TeamMembers[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // reqmade UserReqTeamtoJoin
  // reqcome TeamReqUsertoJoin
}

model UserCredit {
  id String @id @default(cuid())
  initialCredit Int @default(4)
  user User @relation(fields: [userid], references: [id])
  userid String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamMembers {
  id String @id @default(cuid())
  user User @relation(fields: [userId],references: [id])
  userId String

  team Team @relation(fields: [teamId],references: [id])
  teamId String

  joinedAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId,teamId])
}

model Team {
  id String @id @default(cuid())
  teamname String @unique
  maxteamsize Int @default(5)

  category categoryName @default(Dev)

  leader User @relation(fields: [leaderid], references: [id])
  leaderid String

  members TeamMembers[]

  projectname String
  projectdesc String @db.Text
  hackathonname String
  hackathondesc String @db.Text
  hackathonlink String

  createdAt DateTime @default(now())
  lastUpdated DateTime @updatedAt

  @@unique([id])
}

enum categoryName {
  ML
  Dev
  Web_3
}

// model UserReqTeamtoJoin {
//   id String @id @default(cuid())
//   user User @relation(fields: [userid,username], references: [id,name])
//   userid String
//   username String
//   role Role 
//   team Team @relation(fields: [teamid],references: [id])
//   teamid String
//   success  Boolean @default(false)
//   reqmade DateTime @default(now())
//   createdAt DateTime @default(now())
//   lastUpdated DateTime @updatedAt
// }

// model TeamReqUsertoJoin {
//   id String @id @default(cuid())
//   team Team @relation(fields: [teamid],references: [id])
//   teamid String
//   success Boolean @default(false)
//   reqmade DateTime @default(now())
//   createdAt DateTime @default(now())
//   lastUpdated DateTime @updatedAt
// }

enum Role {
  Helper                                                                                           
  ML_eng     
  Frontend_dev
  Backend_dev
  Design
}