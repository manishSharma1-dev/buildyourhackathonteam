generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id          String        @id @unique
  name        String
  email       String        @unique
  github      String?
  role        Role          @default(Helper)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  bio         String?
  maxteamlimit   Int @default(3)
  linkedin    String?
  teamcreated Team[]
  teamjoined  TeamMembers[]
  requestsSent userReqtojointeam[] @relation(name: "RequestingUser")
  requestsReceived userReqtojointeam[] @relation(name: "TeamLeader")
  credit      UserCredit?

  leaderRejectUserReqtoJoinTeam leaderRejectUserReqtoJoinTeam[]
}

model UserCredit {
  id            String   @id @default(cuid())
  initialCredit Int      
  userid        String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userid], references: [id])
}

model TeamMembers {
  id        String   @id @unique @default(cuid())
  userId    String
  teamId    String
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Team {
  id            String        @id @unique @default(cuid())
  teamname      String        @unique
  maxteamsize   Int           @default(5)
  category      categoryName  @default(Dev)
  leaderid      String
  leadername    String
  projectname   String
  projectdesc   String
  hackathonname String
  hackathondesc String
  createdAt     DateTime      @default(now())
  lastUpdated   DateTime      @updatedAt
  leader        User          @relation(fields: [leaderid], references: [id])
  members       TeamMembers[]
  userReqtojointeam userReqtojointeam[]
}

enum categoryName {
  ML
  Dev
  Web_3
}

model userReqtojointeam {
  id String @id @default(cuid())
  team Team @relation(fields: [teamid],references: [id])
  teamid String
  user User @relation(name: "RequestingUser",fields: [userid],references: [id])
  userid String
  leader   User   @relation(name: "TeamLeader",fields: [leaderid], references: [id]) // Team leader
  leaderid String
  createdAt     DateTime      @default(now())
  lastUpdated   DateTime      @updatedAt
}

model leaderRejectUserReqtoJoinTeam {
  id String @id @default(cuid())
  user User @relation(fields: [userid],references: [id])
  userid String
}

enum Role {
  Helper
  ML_eng
  Frontend_dev
  Backend_dev
  Design
}
